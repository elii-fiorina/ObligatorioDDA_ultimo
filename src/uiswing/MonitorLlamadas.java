package uiswing;

import controlador.ControladorMonitor;
import dominio.Sector.Sector;
import dominio.trabajador.TrabajadorException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import vista.VistaMonitoreo;


public class MonitorLlamadas extends javax.swing.JDialog implements VistaMonitoreo {
    
    ControladorMonitor controlador;
    
    public MonitorLlamadas() {
       initComponents();
       controlador = new ControladorMonitor(this);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel_sector = new javax.swing.JLabel();
        elegir_sector = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListSectores = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel_sector.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel_sector.setText("Elija el sector que desea monitorear:");

        elegir_sector.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        elegir_sector.setText("Monitorear");
        elegir_sector.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        elegir_sector.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        elegir_sector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elegir_sectorActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jListSectores.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jListSectores);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(elegir_sector)
                    .addComponent(jLabel_sector)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                        .addComponent(jScrollPane1)))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel_sector)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(elegir_sector)
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void elegir_sectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elegir_sectorActionPerformed
        String sectorElegido = jListSectores.getSelectedValue();
        if (sectorElegido != null) {
            try {
                elegirSector(sectorElegido);
            } catch (TrabajadorException ex) {
                JOptionPane.showMessageDialog(this, "El sector no tiene llamadas");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo avanzar: no se ha elegido ningun sector");
        }
    }//GEN-LAST:event_elegir_sectorActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton elegir_sector;
    private javax.swing.JLabel jLabel_sector;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jListSectores;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mostrarTodosLosSectores(List<Sector> sectoresTotal) {
        List<String> listaSectoresArr = new ArrayList<>();
        String linea = null;
        for(Sector sector : sectoresTotal){
            linea = formatear(sector);
            listaSectoresArr.add(linea);
        }
        String[] array = new String[listaSectoresArr.size()];
        array = listaSectoresArr.toArray(array);
        jListSectores.setListData(array);
    }

    private String formatear(Sector sector) {
        return sector.getNombre();       
    }

    private void elegirSector(String sectorElegido) throws TrabajadorException {
        List<String> llamadas = controlador.elegirSector(sectorElegido);
        String[] array = new String[llamadas.size()];
        array = llamadas.toArray(array);
        jList1.setListData(array);
    }
}
